// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: bench.proto

package bench

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BenchmarkMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field1        string                 `protobuf:"bytes,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field9        string                 `protobuf:"bytes,9,opt,name=field9,proto3" json:"field9,omitempty"`
	Field18       string                 `protobuf:"bytes,18,opt,name=field18,proto3" json:"field18,omitempty"`
	Field80       bool                   `protobuf:"varint,80,opt,name=field80,proto3" json:"field80,omitempty"`
	Field81       bool                   `protobuf:"varint,81,opt,name=field81,proto3" json:"field81,omitempty"`
	Field2        int32                  `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3        int32                  `protobuf:"varint,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field280      int32                  `protobuf:"varint,280,opt,name=field280,proto3" json:"field280,omitempty"`
	Field6        int32                  `protobuf:"varint,6,opt,name=field6,proto3" json:"field6,omitempty"`
	Field22       int64                  `protobuf:"varint,22,opt,name=field22,proto3" json:"field22,omitempty"`
	Field4        string                 `protobuf:"bytes,4,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5        []uint64               `protobuf:"fixed64,5,rep,packed,name=field5,proto3" json:"field5,omitempty"`
	Field59       bool                   `protobuf:"varint,59,opt,name=field59,proto3" json:"field59,omitempty"`
	Field7        string                 `protobuf:"bytes,7,opt,name=field7,proto3" json:"field7,omitempty"`
	Field16       int32                  `protobuf:"varint,16,opt,name=field16,proto3" json:"field16,omitempty"`
	Field130      int32                  `protobuf:"varint,130,opt,name=field130,proto3" json:"field130,omitempty"`
	Field12       bool                   `protobuf:"varint,12,opt,name=field12,proto3" json:"field12,omitempty"`
	Field17       bool                   `protobuf:"varint,17,opt,name=field17,proto3" json:"field17,omitempty"`
	Field13       bool                   `protobuf:"varint,13,opt,name=field13,proto3" json:"field13,omitempty"`
	Field14       bool                   `protobuf:"varint,14,opt,name=field14,proto3" json:"field14,omitempty"`
	Field104      int32                  `protobuf:"varint,104,opt,name=field104,proto3" json:"field104,omitempty"`
	Field100      int32                  `protobuf:"varint,100,opt,name=field100,proto3" json:"field100,omitempty"`
	Field101      int32                  `protobuf:"varint,101,opt,name=field101,proto3" json:"field101,omitempty"`
	Field102      string                 `protobuf:"bytes,102,opt,name=field102,proto3" json:"field102,omitempty"`
	Field103      string                 `protobuf:"bytes,103,opt,name=field103,proto3" json:"field103,omitempty"`
	Field29       int32                  `protobuf:"varint,29,opt,name=field29,proto3" json:"field29,omitempty"`
	Field30       bool                   `protobuf:"varint,30,opt,name=field30,proto3" json:"field30,omitempty"`
	Field60       int32                  `protobuf:"varint,60,opt,name=field60,proto3" json:"field60,omitempty"`
	Field271      int32                  `protobuf:"varint,271,opt,name=field271,proto3" json:"field271,omitempty"`
	Field272      int32                  `protobuf:"varint,272,opt,name=field272,proto3" json:"field272,omitempty"`
	Field150      int32                  `protobuf:"varint,150,opt,name=field150,proto3" json:"field150,omitempty"`
	Field23       int32                  `protobuf:"varint,23,opt,name=field23,proto3" json:"field23,omitempty"`
	Field24       bool                   `protobuf:"varint,24,opt,name=field24,proto3" json:"field24,omitempty"`
	Field25       int32                  `protobuf:"varint,25,opt,name=field25,proto3" json:"field25,omitempty"`
	Field78       bool                   `protobuf:"varint,78,opt,name=field78,proto3" json:"field78,omitempty"`
	Field67       int32                  `protobuf:"varint,67,opt,name=field67,proto3" json:"field67,omitempty"`
	Field68       int32                  `protobuf:"varint,68,opt,name=field68,proto3" json:"field68,omitempty"`
	Field128      int32                  `protobuf:"varint,128,opt,name=field128,proto3" json:"field128,omitempty"`
	Field129      string                 `protobuf:"bytes,129,opt,name=field129,proto3" json:"field129,omitempty"`
	Field131      int32                  `protobuf:"varint,131,opt,name=field131,proto3" json:"field131,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BenchmarkMessage) Reset() {
	*x = BenchmarkMessage{}
	mi := &file_bench_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BenchmarkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkMessage) ProtoMessage() {}

func (x *BenchmarkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bench_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkMessage.ProtoReflect.Descriptor instead.
func (*BenchmarkMessage) Descriptor() ([]byte, []int) {
	return file_bench_proto_rawDescGZIP(), []int{0}
}

func (x *BenchmarkMessage) GetField1() string {
	if x != nil {
		return x.Field1
	}
	return ""
}

func (x *BenchmarkMessage) GetField9() string {
	if x != nil {
		return x.Field9
	}
	return ""
}

func (x *BenchmarkMessage) GetField18() string {
	if x != nil {
		return x.Field18
	}
	return ""
}

func (x *BenchmarkMessage) GetField80() bool {
	if x != nil {
		return x.Field80
	}
	return false
}

func (x *BenchmarkMessage) GetField81() bool {
	if x != nil {
		return x.Field81
	}
	return false
}

func (x *BenchmarkMessage) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

func (x *BenchmarkMessage) GetField3() int32 {
	if x != nil {
		return x.Field3
	}
	return 0
}

func (x *BenchmarkMessage) GetField280() int32 {
	if x != nil {
		return x.Field280
	}
	return 0
}

func (x *BenchmarkMessage) GetField6() int32 {
	if x != nil {
		return x.Field6
	}
	return 0
}

func (x *BenchmarkMessage) GetField22() int64 {
	if x != nil {
		return x.Field22
	}
	return 0
}

func (x *BenchmarkMessage) GetField4() string {
	if x != nil {
		return x.Field4
	}
	return ""
}

func (x *BenchmarkMessage) GetField5() []uint64 {
	if x != nil {
		return x.Field5
	}
	return nil
}

func (x *BenchmarkMessage) GetField59() bool {
	if x != nil {
		return x.Field59
	}
	return false
}

func (x *BenchmarkMessage) GetField7() string {
	if x != nil {
		return x.Field7
	}
	return ""
}

func (x *BenchmarkMessage) GetField16() int32 {
	if x != nil {
		return x.Field16
	}
	return 0
}

func (x *BenchmarkMessage) GetField130() int32 {
	if x != nil {
		return x.Field130
	}
	return 0
}

func (x *BenchmarkMessage) GetField12() bool {
	if x != nil {
		return x.Field12
	}
	return false
}

func (x *BenchmarkMessage) GetField17() bool {
	if x != nil {
		return x.Field17
	}
	return false
}

func (x *BenchmarkMessage) GetField13() bool {
	if x != nil {
		return x.Field13
	}
	return false
}

func (x *BenchmarkMessage) GetField14() bool {
	if x != nil {
		return x.Field14
	}
	return false
}

func (x *BenchmarkMessage) GetField104() int32 {
	if x != nil {
		return x.Field104
	}
	return 0
}

func (x *BenchmarkMessage) GetField100() int32 {
	if x != nil {
		return x.Field100
	}
	return 0
}

func (x *BenchmarkMessage) GetField101() int32 {
	if x != nil {
		return x.Field101
	}
	return 0
}

func (x *BenchmarkMessage) GetField102() string {
	if x != nil {
		return x.Field102
	}
	return ""
}

func (x *BenchmarkMessage) GetField103() string {
	if x != nil {
		return x.Field103
	}
	return ""
}

func (x *BenchmarkMessage) GetField29() int32 {
	if x != nil {
		return x.Field29
	}
	return 0
}

func (x *BenchmarkMessage) GetField30() bool {
	if x != nil {
		return x.Field30
	}
	return false
}

func (x *BenchmarkMessage) GetField60() int32 {
	if x != nil {
		return x.Field60
	}
	return 0
}

func (x *BenchmarkMessage) GetField271() int32 {
	if x != nil {
		return x.Field271
	}
	return 0
}

func (x *BenchmarkMessage) GetField272() int32 {
	if x != nil {
		return x.Field272
	}
	return 0
}

func (x *BenchmarkMessage) GetField150() int32 {
	if x != nil {
		return x.Field150
	}
	return 0
}

func (x *BenchmarkMessage) GetField23() int32 {
	if x != nil {
		return x.Field23
	}
	return 0
}

func (x *BenchmarkMessage) GetField24() bool {
	if x != nil {
		return x.Field24
	}
	return false
}

func (x *BenchmarkMessage) GetField25() int32 {
	if x != nil {
		return x.Field25
	}
	return 0
}

func (x *BenchmarkMessage) GetField78() bool {
	if x != nil {
		return x.Field78
	}
	return false
}

func (x *BenchmarkMessage) GetField67() int32 {
	if x != nil {
		return x.Field67
	}
	return 0
}

func (x *BenchmarkMessage) GetField68() int32 {
	if x != nil {
		return x.Field68
	}
	return 0
}

func (x *BenchmarkMessage) GetField128() int32 {
	if x != nil {
		return x.Field128
	}
	return 0
}

func (x *BenchmarkMessage) GetField129() string {
	if x != nil {
		return x.Field129
	}
	return ""
}

func (x *BenchmarkMessage) GetField131() int32 {
	if x != nil {
		return x.Field131
	}
	return 0
}

var File_bench_proto protoreflect.FileDescriptor

const file_bench_proto_rawDesc = "" +
	"\n" +
	"\vbench.proto\x12\x05bench\"\xb4\b\n" +
	"\x10BenchmarkMessage\x12\x16\n" +
	"\x06field1\x18\x01 \x01(\tR\x06field1\x12\x16\n" +
	"\x06field9\x18\t \x01(\tR\x06field9\x12\x18\n" +
	"\afield18\x18\x12 \x01(\tR\afield18\x12\x18\n" +
	"\afield80\x18P \x01(\bR\afield80\x12\x18\n" +
	"\afield81\x18Q \x01(\bR\afield81\x12\x16\n" +
	"\x06field2\x18\x02 \x01(\x05R\x06field2\x12\x16\n" +
	"\x06field3\x18\x03 \x01(\x05R\x06field3\x12\x1b\n" +
	"\bfield280\x18\x98\x02 \x01(\x05R\bfield280\x12\x16\n" +
	"\x06field6\x18\x06 \x01(\x05R\x06field6\x12\x18\n" +
	"\afield22\x18\x16 \x01(\x03R\afield22\x12\x16\n" +
	"\x06field4\x18\x04 \x01(\tR\x06field4\x12\x16\n" +
	"\x06field5\x18\x05 \x03(\x06R\x06field5\x12\x18\n" +
	"\afield59\x18; \x01(\bR\afield59\x12\x16\n" +
	"\x06field7\x18\a \x01(\tR\x06field7\x12\x18\n" +
	"\afield16\x18\x10 \x01(\x05R\afield16\x12\x1b\n" +
	"\bfield130\x18\x82\x01 \x01(\x05R\bfield130\x12\x18\n" +
	"\afield12\x18\f \x01(\bR\afield12\x12\x18\n" +
	"\afield17\x18\x11 \x01(\bR\afield17\x12\x18\n" +
	"\afield13\x18\r \x01(\bR\afield13\x12\x18\n" +
	"\afield14\x18\x0e \x01(\bR\afield14\x12\x1a\n" +
	"\bfield104\x18h \x01(\x05R\bfield104\x12\x1a\n" +
	"\bfield100\x18d \x01(\x05R\bfield100\x12\x1a\n" +
	"\bfield101\x18e \x01(\x05R\bfield101\x12\x1a\n" +
	"\bfield102\x18f \x01(\tR\bfield102\x12\x1a\n" +
	"\bfield103\x18g \x01(\tR\bfield103\x12\x18\n" +
	"\afield29\x18\x1d \x01(\x05R\afield29\x12\x18\n" +
	"\afield30\x18\x1e \x01(\bR\afield30\x12\x18\n" +
	"\afield60\x18< \x01(\x05R\afield60\x12\x1b\n" +
	"\bfield271\x18\x8f\x02 \x01(\x05R\bfield271\x12\x1b\n" +
	"\bfield272\x18\x90\x02 \x01(\x05R\bfield272\x12\x1b\n" +
	"\bfield150\x18\x96\x01 \x01(\x05R\bfield150\x12\x18\n" +
	"\afield23\x18\x17 \x01(\x05R\afield23\x12\x18\n" +
	"\afield24\x18\x18 \x01(\bR\afield24\x12\x18\n" +
	"\afield25\x18\x19 \x01(\x05R\afield25\x12\x18\n" +
	"\afield78\x18N \x01(\bR\afield78\x12\x18\n" +
	"\afield67\x18C \x01(\x05R\afield67\x12\x18\n" +
	"\afield68\x18D \x01(\x05R\afield68\x12\x1b\n" +
	"\bfield128\x18\x80\x01 \x01(\x05R\bfield128\x12\x1b\n" +
	"\bfield129\x18\x81\x01 \x01(\tR\bfield129\x12\x1b\n" +
	"\bfield131\x18\x83\x01 \x01(\x05R\bfield1312G\n" +
	"\fHelloService\x127\n" +
	"\x03Say\x12\x17.bench.BenchmarkMessage\x1a\x17.bench.BenchmarkMessageB\n" +
	"H\x01Z\x06/benchb\x06proto3"

var (
	file_bench_proto_rawDescOnce sync.Once
	file_bench_proto_rawDescData []byte
)

func file_bench_proto_rawDescGZIP() []byte {
	file_bench_proto_rawDescOnce.Do(func() {
		file_bench_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bench_proto_rawDesc), len(file_bench_proto_rawDesc)))
	})
	return file_bench_proto_rawDescData
}

var file_bench_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_bench_proto_goTypes = []any{
	(*BenchmarkMessage)(nil), // 0: bench.BenchmarkMessage
}
var file_bench_proto_depIdxs = []int32{
	0, // 0: bench.HelloService.Say:input_type -> bench.BenchmarkMessage
	0, // 1: bench.HelloService.Say:output_type -> bench.BenchmarkMessage
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_bench_proto_init() }
func file_bench_proto_init() {
	if File_bench_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bench_proto_rawDesc), len(file_bench_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bench_proto_goTypes,
		DependencyIndexes: file_bench_proto_depIdxs,
		MessageInfos:      file_bench_proto_msgTypes,
	}.Build()
	File_bench_proto = out.File
	file_bench_proto_goTypes = nil
	file_bench_proto_depIdxs = nil
}

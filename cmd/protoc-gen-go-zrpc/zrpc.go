package main

import (
	"fmt"
	"strconv"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

const (
	fmtPackage     = protogen.GoImportPath("fmt")
	contextPackage = protogen.GoImportPath("context")
	zrpcPackage    = protogen.GoImportPath("github.com/crazyfrankie/zrpc")
)

type serviceGenerator interface {
	formatFullMethodSymbol(service *protogen.Service, method *protogen.Method) string
	genFullMethods(g *protogen.GeneratedFile, service *protogen.Service)
	generateClientStruct(g *protogen.GeneratedFile, clientName string)
	generateNewClientDefinitions(g *protogen.GeneratedFile, file *protogen.Service, clientName string)
	generateUnimplementedServerType(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service)
	generateServerFunctions(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, serverName string, serviceDescVar string)
	formatHandlerFuncName(service *protogen.Service, hname string) string
}

type serviceGenerate struct{}

func (s serviceGenerate) formatFullMethodSymbol(service *protogen.Service, method *protogen.Method) string {
	return fmt.Sprintf("%s_%s_FullMethodName", service.GoName, method.GoName)
}

func (s serviceGenerate) genFullMethods(g *protogen.GeneratedFile, service *protogen.Service) {
	if len(service.Methods) == 0 {
		return
	}

	g.P("const (")
	for _, mtd := range service.Methods {
		key := generator.formatFullMethodSymbol(service, mtd)
		val := fmt.Sprintf("%s/%s", service.Desc.FullName(), mtd.GoName)
		g.P(key+` = "`, val, `"`)
	}
	g.P(")")
	g.P()
}

func (s serviceGenerate) generateClientStruct(g *protogen.GeneratedFile, clientName string) {
	g.P("type ", unExport(clientName), " struct {")
	g.P("cli ", zrpcPackage.Ident("ClientInterface"))
	g.P("}")
	g.P()
}

func (s serviceGenerate) generateNewClientDefinitions(g *protogen.GeneratedFile, _ *protogen.Service, clientName string) {
	g.P("return &", unExport(clientName), "{cc}")
}

func (s serviceGenerate) generateUnimplementedServerType(_ *protogen.Plugin, _ *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	serverType := service.GoName + "Server"
	mustOrShould := "must"
	if !*requireUnimplemented {
		mustOrShould = "should"
	}
	// Server Unimplemented struct for forward compatibility.
	g.P("// Unimplemented", serverType, " ", mustOrShould, " be embedded to have")
	g.P("// forward compatible implementations.")
	g.P("//")
	g.P("// NOTE: this should be embedded by value instead of pointer to avoid a nil")
	g.P("// pointer dereference when methods are called.")
	g.P("type Unimplemented", serverType, " struct {}")
	g.P()
	for _, method := range service.Methods {
		nilArg := "nil,"
		g.P("func (Unimplemented", serverType, ") ", serverSignature(g, method), "{")
		g.P("return ", nilArg, fmtPackage.Ident("Errorf"), "(", `"method `, method.GoName, ` not implemented")`)
		g.P("}")
	}
	if *requireUnimplemented {
		g.P("func (Unimplemented", serverType, ") mustEmbedUnimplemented", serverType, "() {}")
	}
	g.P("func (Unimplemented", serverType, ") testEmbeddedByValue() {}")
	g.P()
}

func (s serviceGenerate) generateServerFunctions(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, serverName string, serviceDescVar string) {
	// Server handler implementations.
	handlerNames := make([]string, 0, len(service.Methods))
	for _, method := range service.Methods {
		hname := genServerMethod(gen, file, g, method, func(hname string) string {
			return hname
		})
		handlerNames = append(handlerNames, hname)
	}
	genServiceDesc(file, g, serviceDescVar, serverName, service, handlerNames)
}

func (s serviceGenerate) formatHandlerFuncName(_ *protogen.Service, hname string) string {
	return hname
}

var generator serviceGenerator = serviceGenerate{}

// FileDescriptorProto.package field number
const fileDescriptorProtoPackageFieldNumber = 2

// FileDescriptorProto.syntax field number
const fileDescriptorProtoSyntaxFieldNumber = 12

// generateFile generates a _zrpc.pb.go file containing zRPC service definitions.
func generateFiles(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_zrpc.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	// Print all comments associated with the syntax field.
	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))
	g.P("// Code generated by protoc-gen-go-zrpc. DO NOT EDIT.")
	g.P("// versrions:")
	g.P("// -protoc-gen-go-zrpc ", version)
	g.P("// -protoc             ", protocVersion(gen))
	g.P()
	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoPackageFieldNumber}))
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

// generateFileContent generates the zRPC service definitions
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	for _, svc := range file.Services {
		genServices(gen, file, g, svc)
	}
}

// genServiceComments copies the comments from the RPC proto definitions
// to the corresponding generated interface file.
func genServiceComments(g *protogen.GeneratedFile, service *protogen.Service) {
	if service.Comments.Leading != "" {
		// Add empty comment line to attach this service's comments to
		// the godoc comments previously output for all services.
		g.P("//")
		g.P(strings.TrimSpace(service.Comments.Leading.String()))
	}
}

func genServices(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	// Full methods constants.
	generator.genFullMethods(g, service)

	clientName := service.GoName + "Client"

	g.P("// ", clientName, " is the API for ", service.GoName, " service.")
	g.P("")
	genServiceComments(g, service)

	// Client interface
	g.AnnotateSymbol(clientName, protogen.Annotation{Location: service.Location})
	g.P("type ", clientName, " interface {")
	for _, mtd := range service.Methods {
		g.AnnotateSymbol(clientName+"."+mtd.GoName, protogen.Annotation{Location: mtd.Location})
		g.P(mtd.Comments.Leading, clientSignature(g, mtd))
	}
	g.P("}")
	g.P()

	// client structure
	generator.generateClientStruct(g, clientName)

	// NewClient Factory
	g.P("func New", clientName, " (cc ", zrpcPackage.Ident("ClientInterface"), ") ", clientName, " {")
	generator.generateNewClientDefinitions(g, service, clientName)
	g.P("}")
	g.P()

	// Client Method
	for _, method := range service.Methods {
		genClientMethod(gen, file, g, method)
	}

	mustOrShould := "must"
	if !*requireUnimplemented {
		mustOrShould = "should"
	}

	// Server interface
	serverName := service.GoName + "Server"
	g.P("// ", serverName, " is the server API for ", service.GoName, " service")
	g.P("// All implementations ", mustOrShould, " embed Unimplemented", serverName)
	g.P("// for forward compatibility.")

	genServiceComments(g, service)
	g.AnnotateSymbol(serverName, protogen.Annotation{Location: service.Location})
	g.P("type ", serverName, " interface {")
	for _, mtd := range service.Methods {
		g.AnnotateSymbol(serverName+"."+mtd.GoName, protogen.Annotation{Location: mtd.Location})
		g.P(mtd.Comments.Leading,
			serverSignature(g, mtd))
	}
	if *requireUnimplemented {
		g.P("mustEmbedUnimplemented", serverName, "()")
	}
	g.P("}")
	g.P()

	// Server Unimplemented struct for forward compatibility.
	generator.generateUnimplementedServerType(gen, file, g, service)

	// Unsafe Server interface to opt-out of forward compatibility.
	g.P("// Unsafe", serverName, " may be embedded to opt out of forward compatibility for this service.")
	g.P("// Use of this interface is not recommended, as added methods to ", serverName, " will")
	g.P("// result in compilation errors.")
	g.P("type Unsafe", serverName, " interface {")
	g.P("mustEmbedUnimplemented", serverName, "()")
	g.P("}")

	// Server registration.
	serviceDescVar := service.GoName + "_ServiceDesc"
	g.P("func Register", service.GoName, "Server(s ", zrpcPackage.Ident("ServiceRegistrar"), ", srv ", serverName, ") {")
	g.P("// If the following call panics, it indicates Unimplemented", serverName, " was")
	g.P("// embedded by pointer and is nil.  This will cause panics if an")
	g.P("// unimplemented method is ever invoked, so we test this at initialization")
	g.P("// time to prevent it from happening at runtime later due to I/O.")
	g.P("if t, ok := srv.(interface { testEmbeddedByValue() }); ok {")
	g.P("t.testEmbeddedByValue()")
	g.P("}")
	g.P("s.RegisterService(&", serviceDescVar, `, srv)`)
	g.P("}")
	g.P()

	generator.generateServerFunctions(gen, file, g, service, serverName, serviceDescVar)
}

func clientSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	s := method.GoName + "(ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context"))
	s += ", in *" + g.QualifiedGoIdent(method.Input.GoIdent) + ") ("
	s += "*" + g.QualifiedGoIdent(method.Output.GoIdent)
	s += ", error)"
	return s
}

func genClientMethod(_ *protogen.Plugin, _ *protogen.File, g *protogen.GeneratedFile, method *protogen.Method) {
	service := method.Parent
	methodName := generator.formatFullMethodSymbol(service, method)

	g.P("func (c *", unExport(service.GoName), "Client) ", clientSignature(g, method), " {")
	g.P("out := new(", method.Output.GoIdent, ")")
	g.P("err := c.cli.Invoke(ctx, ", methodName, ", in, out)")
	g.P("if err != nil { return nil, err }")
	g.P("return out, nil")
	g.P("}")
	g.P()
}

func serverSignature(g *protogen.GeneratedFile, method *protogen.Method) any {
	s := method.GoName + "(" + g.QualifiedGoIdent(contextPackage.Ident("Context"))
	s += ", *" + g.QualifiedGoIdent(method.Input.GoIdent) + ") ("
	s += "*" + g.QualifiedGoIdent(method.Output.GoIdent)
	s += ", error)"
	return s
}

func genServerMethod(_ *protogen.Plugin, _ *protogen.File, g *protogen.GeneratedFile, method *protogen.Method, hnameFuncNameFormatter func(string) string) string {
	service := method.Parent
	hname := fmt.Sprintf("_%s_%s_Handler", service.GoName, method.GoName)
	fullMethodName := generator.formatFullMethodSymbol(service, method)

	g.P("func ", hnameFuncNameFormatter(hname), "(srv interface{}, ctx ", contextPackage.Ident("Context"), ", dec func(interface{}) error, middleware ", zrpcPackage.Ident("ServerMiddleware"), ") (interface{}, error) {")
	g.P("in := new(", method.Input.GoIdent, ")")
	g.P("if err := dec(in); err != nil { return nil, err }")
	g.P("if middleware == nil { return srv.(", service.GoName, "Server).", method.GoName, "(ctx, in) }")
	g.P("info := &", zrpcPackage.Ident("ServerInfo"), "{")
	g.P("Server: srv,")
	g.P("FullMethod: ", fullMethodName, ",")
	g.P("}")
	g.P("handler := func(ctx ", contextPackage.Ident("Context"), ", req interface{}) (interface{}, error) {")
	g.P("return srv.(", service.GoName, "Server).", method.GoName, "(ctx, req.(*", method.Input.GoIdent, "))")
	g.P("}")
	g.P("return middleware(ctx, in, info, handler)")
	g.P("}")
	g.P()

	return hname
}

func genServiceDesc(file *protogen.File, g *protogen.GeneratedFile, serviceDescVar string, serviceName string, service *protogen.Service, handlerNames []string) {
	// Service descriptor.
	g.P("// ", serviceDescVar, " is the ", zrpcPackage.Ident("ServiceDesc"), " for ", service.GoName, " service.")
	g.P("// It's only intended for direct use with", zrpcPackage.Ident("RegisterService"), ",")
	g.P("// and not to be introspected or modified (even as a copy)")
	g.P("var ", serviceDescVar, " = ", zrpcPackage.Ident("ServiceDesc"), "{")
	g.P("ServiceName:", strconv.Quote(string(service.Desc.FullName())), ",")
	g.P("HandlerType:", "(*", serviceName, ")(nil),")
	g.P("Methods:", "[]", zrpcPackage.Ident("MethodDesc"), "{")
	for i, mtd := range service.Methods {
		g.P("{")
		g.P("MethodName: ", strconv.Quote(string(mtd.Desc.Name())), ",")
		g.P("Handler: ", handlerNames[i], ",")
		g.P("},")
	}
	g.P("},")
	g.P("Metadata: \"", file.Desc.Path(), "\",")
	g.P("}")
	g.P()
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "unknown"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func genLeadingComments(g *protogen.GeneratedFile, loc protoreflect.SourceLocation) {
	for _, s := range loc.LeadingDetachedComments {
		g.P(protogen.Comments(s))
		g.P()
	}
	if s := loc.LeadingComments; s != "" {
		g.P(protogen.Comments(s))
		g.P()
	}
}

func unExport(s string) string {
	return strings.ToLower(s[:1]) + s[1:]
}

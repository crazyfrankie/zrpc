// Code generated by protoc-gen-go-zrpc. DO NOT EDIT.
// versrions:
// -protoc-gen-go-zrpc v0.1.0
// -protoc             v5.29.3

package file

import (
	context "context"
	fmt "fmt"
	zrpc "github.com/crazyfrankie/zrpc"
)

const (
	FileService_Upload_FullMethodName = "file.FileService/Upload"
)

// FileServiceClient is the API for FileService service.

type FileServiceClient interface {
	Upload(ctx context.Context, in *UploadRequest) (*UploadResponse, error)
}

type fileServiceClient struct {
	cli zrpc.ClientInterface
}

func NewFileServiceClient(cc zrpc.ClientInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) Upload(ctx context.Context, in *UploadRequest) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cli.Invoke(ctx, FileService_Upload_FullMethodName, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility.
type FileServiceServer interface {
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServiceServer struct{}

func (UnimplementedFileServiceServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, fmt.Errorf("method Upload not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}
func (UnimplementedFileServiceServer) testEmbeddedByValue()                     {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s zrpc.ServiceRegistrar, srv FileServiceServer) {
	// If the following call panics, it indicates UnimplementedFileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Upload(ctx, req.(*UploadRequest))
	}
	return handler(ctx, in)
}

// FileService_ServiceDesc is the zrpc.ServiceDesc for FileService service.
// It's only intended for direct use withzrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = zrpc.ServiceDesc{
	ServiceName: "file.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []zrpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _FileService_Upload_Handler,
		},
	},
	Metadata: "file.proto",
}

// Code generated by protoc-gen-go-zrpc. DO NOT EDIT.
// versrions:
// -protoc-gen-go-zrpc v0.1.0
// -protoc             v5.29.3

package user

import (
	context "context"
	fmt "fmt"
	zrpc "github.com/crazyfrankie/zrpc"
)

const (
	UserService_Register_FullMethodName = "user.UserService/Register"
)

// UserServiceClient is the API for UserService service.

type UserServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest) (*RegisterResponse, error)
}

type userServiceClient struct {
	cli zrpc.ClientInterface
}

func NewUserServiceClient(cc zrpc.ClientInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Register(ctx context.Context, in *RegisterRequest) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cli.Invoke(ctx, UserService_Register_FullMethodName, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, fmt.Errorf("method Register not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s zrpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call panics, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, middleware zrpc.ServerMiddleware) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if middleware == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &zrpc.ServerInfo{
		Server:     srv,
		FullMethod: UserService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return middleware(ctx, in, info, handler)
}

// UserService_ServiceDesc is the zrpc.ServiceDesc for UserService service.
// It's only intended for direct use withzrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = zrpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []zrpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
	},
	Metadata: "user.proto",
}
